# app/models/tasks.py

from app import db

from . import save, time_now, delete, GUID


class TaskModel(db.Model):
    """
    Create a Task table
    It will be a database representation of a background task that runs after completion of a request
    """
    __tablename__ = 'tasks'

    # Primary key will be the job identifiers generated by RQ.
    id = db.Column(GUID, primary_key=True)
    name = db.Column(db.String(128), index=True)
    description = db.Column(db.Text)
    timestamp = db.Column(db.DateTime, default=time_now())
    # Flag to separate tasks that ended from those that are actively running
    complete = db.Column(db.Boolean, default=False)

    @staticmethod
    def retrieve_tasks(tasks: list):
        if not tasks or type(tasks) != list:
            return []
        _tasks = []
        for position, task in enumerate(tasks):
            if not task or type(task) != TaskModel:
                continue
            _tasks.append(
                {
                    'id': task.id,
                    'name': task.name,
                    'timestamp': task.timestamp.strftime("%A %b %d, %Y %I:%M %p"),
                    'description': task.description,
                    'complete': task.complete,
                }
            )
        return _tasks

    def save(self):
        return save(self)

    def delete(self):
        return delete(self)

    def __repr__(self):
        return '<Task: {}>'.format(self.id)
